# """
# we see that which path has least corners and sotre just the corners in the path
# we return the path that has min corners and return that as output
# """
def getOptimisedPath(path):
    #storing the previous index
    prev_x=-1
    #count the number of x that have had the same value as x, till present existing in the path
    #if count=1 and x==prev_x,meaning now 3 consecutive times x has been same
    #we delete the prev_node , so the cnt stays 1
    cnt_x=0#number of x that have been common
    prev_y=-1
    cnt_y=0
    #print(prev_x,prev_y)
    n=len(path)
    i=0
    while(i<n):

        x=path[i][0]
        y=path[i][1]
        #see if there are coordinates such that x are same in continuation
        if(x==prev_x):
            if(cnt_x==1):
                #remove the coodrdinate before
                #as this coordinate(x,y) and (prev_prev_x,prev_prev_y) are sufficient for this line
                #print(path[m])
                #print((prev_x,prev_y))
                #print("deleted ",prev_x," ",prev_y)
                path.remove((prev_x,prev_y))
                i-=1#we dont want ncrement in i so to neutralise i+=1 in future
            else:
                cnt_x=1#if x is same and xnt_x==0, cnt_x=1 , for next time
        else:
            cnt_x=0#if x are not same

        #see if there are coordinates such that y are same in continuation
        #for documentation see x above
        if(y==prev_y):
            if(cnt_y==1):
                #more 
                #remove the coodrdinate before
                #print("deleted ",prev_x," ",prev_y)
                path.remove((prev_x,prev_y))
                i-=1
            else:
                cnt_y=1

        else:
            cnt_y=0
        #storing the previous coordinates
        prev_x=x
        prev_y=y
        i+=1#moving to the next node
        n=len(path)#as we keep on deleting the nodes , we need to update the n
        #print(x," ",y," ",cnt_x," ",cnt_y)
    return pathdef traverse_path(pixel_path):

    """
    Purpose:
    ---
    This function should make the ball traverse the calculated path.

    Teams are free to choose logic for this function.

    NOTE: Refer the code of main function in task_3.py.

    Input Arguments:
    ---
    `pixel_path` : [ type can be decided by teams ]

    Returns:
    ---
    None

    Example call:
    ---
    traverse_path(pixel_path)

    """
    ##############	ADD YOUR CODE HERE	#############
    #loop from start to a point less than end,as dst=src+1
    #this threshold is to decide how much distance before setpoint should change
    thresh=2000
    #threshold for distance from corner\
    thresh_c=100
    #reaching closer to destination
    dstFrame=0
    
    for i in range(len(pixel_path)-1):
        #PHASE-1(start)
        #go from one pixel_path point to another
        #################################################################################################
        #true loop until ball reached destination
        src=pixel_path[i]
        dst=pixel_path[i+1]
        #flag for phase-2
        flag_p2=False
        
        
        task3.setTunings()
        task_3.change_setpoint(dst)
        #print("STARTING JOURNEY TO:",(dst[0]-640)/1280,(dst[1]-640)/1280)
        
        while(True):                
            
            center_x,center_y=getBallCoordinates()
            if((center_x==None) or (center_y==None)):
                continue
            if((center_x-dst[0])**2+(center_y-dst[1])**2 < thresh):
                #instead of breaking here let's increase kd , so that it can slow and also move to next set point
                #put next set point at thresh in the direction of future path
               
                #PHASE-N
                #reached destination
                #############################################################################################
                if(i==len(pixel_path)-1):
                    #we have reached the dst
                    #do nothing for few frames then break
                    if(dstFrame<9):
                        #let it reach more closer to destination
                        dstFrame=dstFrame+1
                    else:
                        break
                else:
                    #PHASE-2,PHASE-1(end)
                    #reached close to corner,change tunings and destination 
                    ##############################################################################
                    #specila destination change for corner
                    dst_corner=calculateSetPntAtThresh(i,pixel_path,thresh)
                    flag_p2=True
                    task3.setTunings()
                    task_3.change_setpoint(dst_corner)
                    
            #PHASE-2(end)
            #surpassed the corner
            ################################################################################
            if(((center_x-dst-corner[0])**2+(center_y-dst_corner[1])**2 < thresh_c) and flag_p2) :
                #when we reach closer to corner break
                break
                
            try:
                task_3.control_logic(center_x,center_y)
            except:
                print('\n[ERROR] Your control_logic function throwed an Exception. Kindly debug your code!')
                print('Stop the CoppeliaSim simulation manually.\n')
                traceback.print_exc(file=sys.stdout)
                print()
                sys.exit()

	##################################################
def calculateSetPntAtThresh(i,pixel_path,thresh):
    #wdth=1280/10
    #check which coordinate is same b/w dst1,dst2
    if(pixel_path[i+1][0]==pixel_path[i+2][0]):
        #check in which directiojn we have to go for other coordinate
        if(pixel_path[i+1][1]<pixel_path[i+2][1]):
            symbol=1
        else:
            symbol=-1
        #calculate destination based on info gathered
        dst=[pixel_path[i+1][0],pixel_path[i+1][1]+symbol*thresh]
        
    if(pixel_path[i+1][1]==pixel_path[i+2][1]):
        if(pixel_path[i+1][0]<pixel_path[i+2][0]):
            symbol=1
        else:
            symbol=-1
        dst=[pixel_path[i+1][0]+symbol*thresh,pixel_path[i+1][1]]
        
    return dst


task_1a_part1.py
def colorMask(imgHsv):
    #if saturation value is small enough,changing hv give black and white part
    upr_hsv=(180,70,255)
    lwr_hsv=(0,0,0)
    mask=cv2.inRange(imgHsv,lwr_hsv,upr_hsv)#only colored circles are black
    mask=cv2.bitwise_not(mask,mask=None)
    #plt.imshow(cv2.cvtColor(mask,cv2.COLOR_BGR2RGB))
    return mask


